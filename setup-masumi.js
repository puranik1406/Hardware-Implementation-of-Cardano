#!/usr/bin/env node

/**
 * Masumi Network Setup Script
 * Helps configure your environment for Masumi Network integration
 */

const fs = require('fs')
const path = require('path')
const readline = require('readline')

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
})

const question = (prompt) => {
  return new Promise((resolve) => {
    rl.question(prompt, resolve)
  })
}

async function setupMasumiIntegration() {
  console.log('\nüöÄ Masumi Network Integration Setup')
  console.log('=====================================\n')

  console.log('This script will help you configure your Masumi Network integration.')
  console.log('You can skip any field by pressing Enter (will use defaults).\n')

  // Masumi Network Configuration
  console.log('üì° MASUMI NETWORK CONFIGURATION')
  const masumiApiUrl = await question('Masumi API URL (https://api.masumi.network/v1): ') || 'https://api.masumi.network/v1'
  const masumiApiKey = await question('Masumi API Key: ')
  const masumiWsUrl = await question('Masumi WebSocket URL (wss://api.masumi.network/ws): ') || 'wss://api.masumi.network/ws'
  const masumiProjectId = await question('Masumi Project ID (optional): ')

  // Cardano Configuration
  console.log('\n‚õìÔ∏è  CARDANO BLOCKCHAIN CONFIGURATION')
  const cardanoNetwork = await question('Cardano Network (testnet/preprod/mainnet) [testnet]: ') || 'testnet'
  const blockfrostProjectId = await question('Blockfrost Project ID: ')
  
  let blockfrostUrl = 'https://cardano-testnet.blockfrost.io/api/v0'
  if (cardanoNetwork === 'mainnet') {
    blockfrostUrl = 'https://cardano-mainnet.blockfrost.io/api/v0'
  } else if (cardanoNetwork === 'preprod') {
    blockfrostUrl = 'https://cardano-preprod.blockfrost.io/api/v0'
  }

  // Sokosumi Configuration
  console.log('\nü§ñ SOKOSUMI PLATFORM CONFIGURATION')
  const sokosumiWsUrl = await question('Sokosumi WebSocket URL (wss://app.sokosumi.com/ws): ') || 'wss://app.sokosumi.com/ws'
  const sokosumiApiKey = await question('Sokosumi API Key: ')
  const sokosumiAppId = await question('Sokosumi App ID (optional): ')

  // Development Options
  console.log('\n‚öôÔ∏è  DEVELOPMENT OPTIONS')
  const debugMode = await question('Enable debug mode? (y/N): ') || 'n'
  const useMockApi = await question('Use mock API for development? (Y/n): ') || 'y'

  // Generate .env file
  const envContent = `# Masumi Network Configuration
# Generated by setup script on ${new Date().toISOString()}

# ==============================================
# MASUMI NETWORK CONFIGURATION
# ==============================================
VITE_MASUMI_API_URL=${masumiApiUrl}
VITE_MASUMI_API_KEY=${masumiApiKey}
VITE_MASUMI_WS_URL=${masumiWsUrl}
VITE_MASUMI_PROJECT_ID=${masumiProjectId}

# ==============================================
# CARDANO BLOCKCHAIN CONFIGURATION
# ==============================================
VITE_CARDANO_NETWORK=${cardanoNetwork}
VITE_BLOCKFROST_PROJECT_ID=${blockfrostProjectId}
VITE_BLOCKFROST_API_URL=${blockfrostUrl}
VITE_KOIOS_API_URL=https://${cardanoNetwork === 'mainnet' ? 'api' : 'testnet'}.koios.rest/api/v1

# ==============================================
# SOKOSUMI PLATFORM CONFIGURATION
# ==============================================
VITE_SOKOSUMI_WS_URL=${sokosumiWsUrl}
VITE_SOKOSUMI_API_KEY=${sokosumiApiKey}
VITE_SOKOSUMI_APP_ID=${sokosumiAppId}

# ==============================================
# DEVELOPMENT CONFIGURATION
# ==============================================
NODE_ENV=development
VITE_DEBUG_MODE=${debugMode.toLowerCase() === 'y' ? 'true' : 'false'}
VITE_LOG_LEVEL=debug
VITE_USE_MOCK_API=${useMockApi.toLowerCase() === 'y' ? 'true' : 'false'}
VITE_MOCK_API_URL=http://localhost:3001

# ==============================================
# SECURITY & PERFORMANCE
# ==============================================
VITE_FORCE_HTTPS=false
VITE_RATE_LIMIT=60
VITE_CONNECTION_TIMEOUT=30000

# ==============================================
# ARDUINO SIMULATION DEFAULTS
# ==============================================
VITE_DEFAULT_AGENT_BALANCE=1000
VITE_DEFAULT_NETWORK_ID=masumi-testnet-001
VITE_ARDUINO_SERIAL_BAUD=115200
`

  // Write .env file
  fs.writeFileSync('.env', envContent)
  
  console.log('\n‚úÖ Configuration saved to .env file!')

  // Validation and next steps
  console.log('\nüìã NEXT STEPS:')
  
  if (!masumiApiKey) {
    console.log('‚ö†Ô∏è  1. Get your Masumi API key from https://developers.masumi.network')
  }
  
  if (!blockfrostProjectId) {
    console.log('‚ö†Ô∏è  2. Get your Blockfrost project ID from https://blockfrost.io')
  }
  
  if (!sokosumiApiKey) {
    console.log('‚ö†Ô∏è  3. Get your Sokosumi API key from https://app.sokosumi.com')
  }

  console.log('üìñ 4. Read MASUMI_INTEGRATION_GUIDE.md for detailed setup instructions')
  console.log('üß™ 5. Start with testnet before moving to mainnet')
  console.log('üöÄ 6. Run: npm run dev to start the development server')

  if (useMockApi.toLowerCase() === 'y') {
    console.log('\nüîß MOCK API SETUP:')
    console.log('Since you enabled mock API, you can start developing immediately.')
    console.log('Run: npm run mock-api (if available) or set up json-server')
  }

  console.log('\nüîê SECURITY REMINDER:')
  console.log('- Never commit your .env file to version control')
  console.log('- Keep your API keys secure')
  console.log('- Use testnet for development')
  console.log('- Enable HTTPS in production')

  rl.close()
}

// Check if running directly
if (require.main === module) {
  setupMasumiIntegration().catch(console.error)
}

module.exports = { setupMasumiIntegration }